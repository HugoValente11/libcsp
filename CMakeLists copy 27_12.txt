cmake_policy(SET CMP0076 NEW)
cmake_policy(SET CMP0079 NEW)

project(CSP_LIB C)

# Add definitions
add_definitions(-D_DEFAULT_SOURCE)

# Define the source and header files for the CSP library
set(CSP_SOURCES
src/csp_bridge.c
src/csp_buffer.c
src/csp_conn.c
src/csp_conn.h
src/csp_crc32.c
src/csp_debug.c
src/csp_dedup.c
src/csp_dedup.h
src/csp_hex_dump.c
src/csp_id.c
src/csp_iflist.c
src/csp_init.c
src/csp_init.h
src/csp_io.c
src/csp_io.h
src/csp_macro.h
src/csp_port.c
src/csp_port.h
src/csp_promisc.c
src/csp_promisc.h
src/csp_qfifo.c
src/csp_qfifo.h
src/csp_rdp.c
src/csp_rdp.h
src/csp_rdp_queue.c
src/csp_rdp_queue.h
src/csp_route.c
src/csp_rtable_cidr.c
src/csp_rtable_stdio.c
src/csp_semaphore.h
src/csp_service_handler.c
src/csp_services.c
src/csp_sfp.c
src/csp_yaml.c
src/interfaces/csp_if_can.c
src/interfaces/csp_if_can_pbuf.c
src/interfaces/csp_if_can_pbuf.h
src/interfaces/csp_if_eth.c
src/interfaces/csp_if_eth_pbuf.c
src/interfaces/csp_if_i2c.c
src/interfaces/csp_if_kiss.c
src/interfaces/csp_if_lo.c
src/interfaces/csp_if_tun.c
src/interfaces/csp_if_udp.c
src/interfaces/csp_if_zmqhub.c
)

set(CSP_HEADERS
include/csp/csp_buffer.h
include/csp/csp_cmp.h
include/csp/csp_crc32.h
include/csp/csp_debug.h
include/csp/csp_error.h
include/csp/csp.h
include/csp/csp_hooks.h
include/csp/csp_id.h
include/csp/csp_iflist.h
include/csp/csp_interface.h
include/csp/csp_promisc.h
include/csp/csp_rtable.h
include/csp/csp_sfp.h
include/csp/csp_types.h
include/csp/csp_yaml.h
include/csp/interfaces/csp_if_can.h
include/csp/interfaces/csp_if_eth.h
include/csp/interfaces/csp_if_eth_pbuf.h
include/csp/interfaces/csp_if_i2c.h
include/csp/interfaces/csp_if_kiss.h
include/csp/interfaces/csp_if_lo.h
include/csp/interfaces/csp_if_tun.h
include/csp/interfaces/csp_if_udp.h
include/csp/interfaces/csp_if_zmqhub.h
)

option(CSP_HAVE_STDIO "OS provides C Standard I/O functions" ON)
option(CSP_ENABLE_CSP_PRINT "Enable csp_print() function" ON)
option(CSP_PRINT_STDIO "Use vprintf() for csp_print() function" ON)

set(CSP_QFIFO_LEN 15 CACHE STRING "Length of incoming queue for router task")
set(CSP_PORT_MAX_BIND 16 CACHE STRING "Length of incoming queue for router task")
set(CSP_CONN_RXQUEUE_LEN 16 CACHE STRING "Number of packets in connection queue")
set(CSP_CONN_MAX 8 CACHE STRING "Number of new connections on socket queue")
set(CSP_BUFFER_SIZE 256 CACHE STRING "Bytes in each packet buffer")
set(CSP_BUFFER_COUNT 15 CACHE STRING "Number of total packet buffers")
set(CSP_RDP_MAX_WINDOW 5 CACHE STRING "Max window size for RDP")
set(CSP_RTABLE_SIZE 10 CACHE STRING "Number of elements in routing table")

option(CSP_USE_RDP "Reliable Datagram Protocol" ON)
option(CSP_USE_HMAC "Hash-based message authentication code" ON)
option(CSP_USE_PROMISC "Promiscious mode" ON)
option(CSP_USE_DEDUP "Packet deduplication" ON)
option(CSP_USE_RTABLE "Use routing table" OFF)

option(CSP_ENABLE_PYTHON3_BINDINGS "Build Python3 binding" OFF)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CSP_POSIX 1)
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Zephyr")
    set(CSP_ZEPHYR 1)
  endif()

 
  # Create the CSP library as a cFE app
  add_cfe_app(csp_lib ${CSP_SOURCES} ${CSP_HEADERS})

  if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND
    CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")

  include(CheckIncludeFiles)
  check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)
  check_include_files(arpa/inet.h HAVE_ARPA_INET_H)

  find_package(Threads REQUIRED)
  find_package(PkgConfig)


  if(PKG_CONFIG_FOUND)
    pkg_search_module(LIBZMQ libzmq)
    if(${LIBZMQ_FOUND})
      message(STATUS "Found ${LIBZMQ_LINK_LIBRARIES} ${LIBZMQ_VERSION}")
      set(CSP_HAVE_LIBZMQ 1)
    else()
      message(NOTICE "No libzmq found")
    endif()

    pkg_search_module(LIBSOCKETCAN libsocketcan)
    if(${LIBSOCKETCAN_FOUND})
      message(STATUS "Found ${LIBSOCKETCAN_LINK_LIBRARIES} ${LIBSOCKETCAN_VERSION}")
      set(CSP_HAVE_LIBSOCKETCAN 1)
    else()
      message(NOTICE "No libsocketcan found")
    endif()
  else()
    message(NOTICE "No pkg-config found")
  endif()
endif()

file(REAL_PATH include csp_inc)
file(REAL_PATH src csp_inc_src)
list(APPEND csp_inc ${CMAKE_CURRENT_BINARY_DIR}/include)

# Include directories for the CSP library
target_include_directories(csp_lib
  PUBLIC ${csp_inc}
  PRIVATE ${csp_inc_src}
)

include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

target_link_libraries(csp_lib yaml)

# Add subdirectories if needed (e.g., for additional CSP components)
add_subdirectory(src)
# add_subdirectory(examples)

configure_file(csp_autoconfig.h.in include/csp/autoconfig.h)
